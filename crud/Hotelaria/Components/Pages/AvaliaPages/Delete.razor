@page "/avalia/delete"
@using Microsoft.EntityFrameworkCore
@using Hotelaria.Data.Models
@using Hotelaria.Data
@using Hotelaria.Services
@using Npgsql
@inject AvaliaService _service;
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Avalia</h2>
    <hr />
    @if (avalia is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Nota</dt>
            <dd class="col-sm-10">@avalia.Nota</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Comentario</dt>
            <dd class="col-sm-10">@avalia.Comentario</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DataAvaliacao</dt>
            <dd class="col-sm-10">@avalia.DataAvaliacao</dd>
        </dl>
        <EditForm method="post" Model="avalia" OnValidSubmit="DeleteAvalia" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(avalia is null)">Delete</button> |
            <a href="/avalia" class="btn btn-secondary">Back to List</a>
        </EditForm>
    }
</div>

@if (Exception != string.Empty)
{
    <div class="alert-danger">@Exception</div>
}

@code {
    private Avalia? avalia;

    [SupplyParameterFromQuery]
    private int IdHospede { get; set; }

    [SupplyParameterFromQuery]
    private int IdAtividade { get; set; }

    private string Exception { get; set; }

    protected override async Task OnInitializedAsync()
    {

        avalia = await _service.FindByPk(IdAtividade,IdHospede);

        if (avalia is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteAvalia()
    {
        await _service.DeleteAsync(IdAtividade, IdHospede);
        NavigationManager.NavigateTo("/avalia");
    }
}
