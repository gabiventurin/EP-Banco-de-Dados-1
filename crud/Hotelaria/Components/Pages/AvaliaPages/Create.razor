@page "/avalia/create"
@using Hotelaria.Data
@using Microsoft.EntityFrameworkCore
@using Hotelaria.Data.Models
@using Hotelaria.Services;
@inject AvaliaService _avaliaService
@inject AtividadeService _atividadeService
@inject HospedeService _hospedeService
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Avalia</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Avalia" OnValidSubmit="AddAvalia" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="nota" class="form-label">Nota:</label>
                <InputNumber id="nota" @bind-Value="Avalia.Nota" class="form-control" min="0" max="10" />
                <ValidationMessage For="() => Avalia.Nota" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="comentario" class="form-label">Comentario:</label>
                <InputText id="comentario" @bind-Value="Avalia.Comentario" class="form-control" />
                <ValidationMessage For="() => Avalia.Comentario" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="idhospede" class="form-label">CPF do hospede:</label>
                <InputSelect id="idhospede" @bind-Value="Avalia.IdHospede" class="form-control">
                    <option value="" disabled>Select an option</option>
                    @foreach (var hospede in Hospedes)
                    {
                        <option value="@hospede.IdHospede">@hospede.Cpf</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Avalia.IdHospede" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="idatividade" class="form-label">Atividade:</label>
                <InputSelect id="idatividade" @bind-Value="Avalia.IdAtividade" class="form-control">
                    <option value="" disabled>Select an option</option>
                    @foreach (var atividade in Atividades)
                    {
                        <option value="@atividade.IdAtividade">@atividade.Nome</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Avalia.IdAtividade" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

@if (Exception != string.Empty)
{
    <div class="alert-danger">@Exception</div>
}

<div>
    <a href="/avalia" class="btn btn-secondary">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Avalia Avalia { get; set; } = new();

    private List<Atividade> Atividades { get; set; } = new();

    private List<Hospede> Hospedes { get; set; } = new();

    private string Exception { get; set; } = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        Atividades = (await _atividadeService.FindAllAsync()).ToList();
        Hospedes = (await _hospedeService.FindAllAsync()).ToList();
    }

    protected void ChangeAtividades(ChangeEventArgs e)
    {
        if (Avalia == null) return;

        Atividades = _atividadeService.FindByHospede(Avalia.IdHospede).ToList();
    }


    private async Task AddAvalia()
    {
        bool needsNavigation = false;
        try
        {
            await _avaliaService.InsertAsync(Avalia);
            Exception = string.Empty;
            await Task.Delay(100);
            needsNavigation = true;
        }
        catch (Exception ex)
        {
            Exception = ex.Message;
        }

        if (needsNavigation)
        {
            NavigationManager.NavigateTo("/avalia");
        }
    }
}
