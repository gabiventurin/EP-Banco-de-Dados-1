@page "/hospedes/create"
@using Microsoft.EntityFrameworkCore
@using Hotelaria.Data.Models
@using Hotelaria.Services
@using Hotelaria.Services.ViewModel
@inject HospedeService _hospedeService
@inject ReservaService _reservaService
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Hospede</h2>
<hr />

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Hospede" OnValidSubmit="AddHospede" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="cpf" class="form-label">Cpf:</label> 
                <InputText id="cpf" @bind-Value="Hospede.Cpf" class="form-control" maxlength="11" />
                <ValidationMessage For="() => Hospede.Cpf" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="idreserva" class="form-label">Número da reserva:</label>
                <InputSelect id="idreserva" @bind-Value="Hospede.IdReserva" class="form-control">
                    <option value="" disabled>Select an option</option>
                    @foreach (var reserva in Reservas)
                    {
                        <option value="@reserva.IdReserva">@reserva.IdReserva</option>
                    }
                </InputSelect>
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>


@if (Exception != string.Empty)
{
    <div class="alert-danger">@Exception</div>
}

<div>
    <a class="btn btn-secondary" href="/hospedes">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private HospedeViewModel Hospede { get; set; } = new();

    private string Exception { get; set; } = string.Empty;

    private List<Reserva> Reservas { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Reservas = (await _reservaService.FindAllAsync()).ToList();
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddHospede()
    {
        bool needsNavigation = false;
        try
        {
            var hospede = new Hospede()
                {
                    Cpf = Hospede.Cpf,
                    IdReserva = Hospede.IdReserva
                };

            await _hospedeService.Insert(hospede);
            Exception = string.Empty;
            needsNavigation = true;
        }
        catch (DbUpdateException ex)
        {
            Exception = "Reserva inválida.";
        }
        catch (Exception ex)
        {
            Exception = ex.Message;
        }

        if (needsNavigation)
        {
            NavigationManager.NavigateTo("/hospedes");
        }
    }
}
