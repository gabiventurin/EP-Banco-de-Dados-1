@page "/hospedes/edit"
@using Microsoft.EntityFrameworkCore
@using Hotelaria.Data.Models
@using Hotelaria.Services
@using Hotelaria.Services.ViewModel
@inject HospedeService _hospedeService
@inject ReservaService _reservaService
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Hospede</h2>
<hr />
@if (Hospede is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Hospede" OnValidSubmit="UpdateHospede" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Hospede.IdHospede" value="@Hospede.IdHospede" />
                <div class="mb-3">
                    <label for="cpf" class="form-label">Cpf:</label>
                    <InputText id="cpf" @bind-Value="Hospede.Cpf" class="form-control" />
                    <ValidationMessage For="() => Hospede.Cpf" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="idreserva" class="form-label">Número da reserva:</label>
                    <InputSelect id="idreserva" @bind-Value="Hospede.IdReserva" class="form-control">
                        <option value="" disabled>Select an option</option>
                        @foreach (var reserva in Reservas)
                        {
                            <option value="@reserva.IdReserva">@reserva.IdReserva</option>
                        }
                    </InputSelect>
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

@if (Exception != string.Empty)
{
    <div class="alert-danger">@Exception</div>
}

<div>
    <a class="btn btn-secondary" href="/hospedes">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int IdHospede { get; set; }

    [SupplyParameterFromForm]
    private HospedeViewModel Hospede { get; set; }

    private List<Reserva> Reservas { get; set; } = new();


    private string Exception { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var hspd = _hospedeService.Find(IdHospede);

        Reservas = (await _reservaService.FindAllAsync()).ToList();

        if (Hospede == null) Hospede = new HospedeViewModel()
            {
                IdHospede = hspd.IdHospede,
                Cpf = hspd.Cpf,
                IdReserva = hspd.IdReserva
            };

        if (Hospede is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }


    private async Task UpdateHospede()
    {
        bool needNavigate = false;
        try
        {
            if (Hospede == null) return;

            var hospede = new Hospede
                {
                    IdHospede = Hospede.IdHospede,
                    Cpf = Hospede.Cpf,
                    IdReserva = Hospede.IdReserva
                };

            await _hospedeService.UpdateAsync(hospede);
            needNavigate = true;
        }
        catch (Exception ex)
        {
            Exception = ex.Message;
        }

        if (needNavigate) NavigationManager.NavigateTo("/hospedes");
    }
}
