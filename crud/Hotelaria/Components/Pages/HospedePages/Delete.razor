@page "/hospedes/delete"
@using Microsoft.EntityFrameworkCore
@using Hotelaria.Data.Models
@using Hotelaria.Services
@using Npgsql
@inject HospedeService _hospedeService
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Hospede</h2>
    <hr />
    @if (hospede is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Cpf</dt>
            <dd class="col-sm-10">@hospede.Cpf</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IdReserva</dt>
            <dd class="col-sm-10">@hospede.IdReserva</dd>
        </dl>
        <EditForm method="post" Model="hospede" OnValidSubmit="DeleteHospede" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(hospede is null)">Delete</button> |
            <a class="btn btn-secondary" href="/hospedes">Back to List</a>
        </EditForm>
    }
</div>

@if (Exception != string.Empty)
{
    <div class="alert-danger">@Exception</div>
}

@code {
    private Hospede? hospede;

    [SupplyParameterFromQuery]
    private int IdHospede { get; set; }

    private string Exception { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hospede = _hospedeService.Find(IdHospede);

        if (hospede is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteHospede()
    {
        bool needsNavigation = false;
        try
        {
            await _hospedeService.Remove(IdHospede);
            needsNavigation = true;
        }
        catch (DbUpdateException ex){
            if (ex.InnerException is PostgresException)
                Exception = "Não é possível remover hóspedes com avaliações!";
            else Exception = ex.Message;
        }
        
        if (needsNavigation)
        {
            NavigationManager.NavigateTo("/hospedes");
        }
    }
}
